(require :cl-peg)
(require :cl-ppcre)

(defun rtest ()
  (rtest-with-index 0)
)

(defun rtest-with-index (start-index)
  (let ((match-count 0)
	(fail-count 0))
    (progn
      (with-open-file (file "test_sentences.txt" :direction :input)
	(do ((line (read-line file nil) (read-line file nil)) 
	     (i 0 (+ i 1))
	     (comment-scanner (cl-ppcre::create-scanner "^#"))
	     )
	    ((or (null line) (> i (+ 10 start-index))))
	  (if (and (> i start-index)
		   (not (cl-ppcre::scan comment-scanner line)))
	      (if (domatch line)
		  (incf match-count)
		  (incf fail-count))
	  )))
      (format t "~&tests finished")
      (format t "~&GOOD :    ~A" match-count)
      (format t "~&BAD  :    ~A" fail-count)
      (format t "~&TOTAL:    ~A" (+ match-count fail-count))
      ))
)

(defun domatch (line)
  (handler-case 
      (let* ((annotation (cl-ppcre::split "--" line))
	     (match-text (first annotation))
	     (match-length (length match-text))
	     (pr (cl-peg:parse *lg* match-text 0))
	     (match-start-offset (cl-peg:pr-start-offset pr))
	     (match-end-offset (cl-peg:pr-end-offset pr))
	     (matched (cl-peg:pr-matched pr))
	     (matched-whole-input (cl-peg:matched-all pr))
	     )
	(format t "~& matched ~S ~S ~S ~A" (cl-peg:pr-matched pr) (cl-peg:pr-start-offset pr) (cl-peg:pr-end-offset pr) match-text)
	(if (not (null matched))
	    (if (not (eq (- match-end-offset match-start-offset) match-length))
		(setf matched-whole-input nil)
		(setf matched-whole-input t)))
	(if (not (and matched matched-whole-input))
	    (progn
	      (if (null (rest annotation))
		  (format t "~& failed for ~A" line)
		  (if (cl-ppcre::scan "BAD" (first (rest annotation)))
		      (setf matched-whole-input t)
		      (if (cl-ppcre::scan "GOOD" (first (rest annotation)))
			  (format t "~& failed on a KNOWN GOOD text, ~A" match-text)
			  (format t "~& failed on text, ~A" match-text)
			  )))
	      (format t "~& did not consume ~A (~A) chars for ~S" match-length (- match-end-offset match-start-offset) match-text)
	      ))
	matched-whole-input
	)
    (cl-peg:missing-non-terminal () (format t "~& ERROR on ~S" line)))

)